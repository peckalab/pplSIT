import os

# examples of Snakemake workflows:
# https://snakemake.github.io/snakemake-workflow-catalog/

# dance with params and functions
# https://github.com/snakemake/snakemake/issues/1122

# issue with providing old files instead of letting snakemake compute them (metadata cleanup)
# https://github.com/snakemake/snakemake/issues/828

# run snakemake from ../workflow folder:
# snakemake -n --configfile=../config/andrey_gpuxxl.yaml --use-conda --rerun-triggers mtime --cores=1

# generate DAG in PDF
# snakemake --forceall --dag --configfile="../config/andrey_pd.yaml" --cores=1 | dot -Tpdf > dag.pdf

# shortcut for neurosuite file paths (LFP, spikes, ephys files)
n_path = lambda animal, session, fname: os.path.join(config['dst_path'], animal, session, 'neurosuite', fname)

# include rules here
include: "rules/copy.smk"
include: "rules/pack.smk"
include: "rules/lfp.smk"
include: "rules/neurosuite.smk"
include: "rules/dlc.smk"
include: "rules/moseq.smk"
include: "rules/descendants.smk"
include: "rules/analysis/shuffle.smk"
include: "rules/analysis/psth.smk"
include: "rules/analysis/aeps.smk"
include: "rules/analysis/spatial.smk"
include: "rules/analysis/behavior.smk"
include: "rules/analysis/population.smk"


target_names_dict = {
    'meta':    ['meta.h5'],
    'DLC':     ['DLC_100Hz.h5', 'video_labeled.mp4'],
    'MoSeq':   [
        'MoSeq.h5', 
        'analysis/MoSeq_tSNE_UMAP.h5',
        #'analysis/MoSeq_W1-W4_GLM.h5'
    ],
    'descendants': ['descendants.h5'],
    'Audio':   [],
    'LFP':     ['lfp.h5'],
    'AEPs':    [
        'AEPs.h5', 
        'analysis/AEP_components.h5', 
        'analysis/aeps_maps.pdf', 
        'analysis/aeps_profiles.pdf'
    ],
    'units':   ['units.h5'],
    'PSTH':    [
        'analysis/psth_tgt_onset.pdf',
        'analysis/psth_tgt_offset.pdf',
        'analysis/psth_trial_onset.pdf',
        'analysis/psth_noise_offset.pdf',
        'analysis/psth_bgr_tgt.pdf',
        'analysis/psth_bgr_sil.pdf',
    ],
    'spatial': [
        'analysis/spiking_maps.png',
        'analysis/fr_maps.pdf',
    ],
    'shuffle': ['analysis/psth_shuffle_micro_silence.h5'],
    'population': ['analysis/W1-W4_tSNE_UMAP.h5']
}

def collect_target_names():
    target_names = []

    for block_name, enabled in config['blocks'].items():
        if not enabled:
            continue
        if not block_name in target_names_dict:
            continue
        
        target_names += target_names_dict[block_name]

    return target_names

target_names = collect_target_names()


def get_targets(wildcards):
    sessions = expand("{session}", session=config["session_IDs"])
    animals  = expand("{animal}", animal=[s.split('_')[0] for s in config["session_IDs"]])

    # build target map
    targets = []
    build_target = lambda animal, session, name: os.path.join(config['dst_path'], animal, session, name)
    for animal, session in zip(animals, sessions):
        for name in target_names:
            targets.append(build_target(animal, session, name))

    return targets

rule all:
    input:
        get_targets