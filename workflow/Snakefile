import os

# examples of Snakemake workflows:
# https://snakemake.github.io/snakemake-workflow-catalog/

# dance with params and functions
# https://github.com/snakemake/snakemake/issues/1122

# issue with providing old files instead of letting snakemake compute them (metadata cleanup)
# https://github.com/snakemake/snakemake/issues/828

# generate DAG in PDF
# snakemake --forceall --dag --configfile="../config/andrey_pd.yaml" --cores=1 | dot -Tpdf > dag.pdf

# shortcut for neurosuite file paths (LFP, spikes, ephys files)
n_path = lambda animal, session, fname: os.path.join(config['dst_path'], animal, session, 'neurosuite', fname)

# include rules here
include: "rules/copy.smk"
include: "rules/pack.smk"
include: "rules/lfp.smk"
include: "rules/neurosuite.smk"
include: "rules/aeps.smk"
include: "rules/dlc.smk"
include: "rules/analysis/shuffle.smk"
include: "rules/analysis/psth.smk"
include: "rules/analysis/aeps.smk"
include: "rules/analysis/spatial.smk"


def get_targets(wildcards):
    # add more target files here
    target_names = [
        'meta.h5',
        'DLC_100Hz.h5',
        'video_labeled.mp4',
        # 'lfp.h5', 
        # 'AEPs.h5', 
        # 'units.h5',
        # 'analysis/AEP_components.h5',
        # 'analysis/psth_tgt_onset.pdf',
        # 'analysis/psth_tgt_offset.pdf',
        # 'analysis/psth_trial_onset.pdf',
        # 'analysis/psth_noise_offset.pdf',
        # 'analysis/psth_bgr_tgt.pdf',
        # 'analysis/psth_bgr_sil.pdf',
        # 'analysis/spiking_maps.png',
        # 'analysis/fr_maps.pdf'
        #'analysis/psth_shuffle_micro_silence.h5'
    ]

    sessions = expand("{session}", session=config["session_IDs"])
    animals  = expand("{animal}", animal=[s.split('_')[0] for s in config["session_IDs"]])

    # build target map
    targets = []
    build_target = lambda animal, session, name: os.path.join(config['dst_path'], animal, session, name)
    for animal, session in zip(animals, sessions):
        for name in target_names:
            targets.append(build_target(animal, session, name))

    return targets

rule all:
    input:
        get_targets